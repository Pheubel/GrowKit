using GrowKitApi.Entities;
using GrowKitApi.Services.Enums;
using GrowKitApi.Services.Structs;
using System.Security.Claims;
using System.Threading.Tasks;

namespace GrowKitApi.Services
{
    /// <summary> A user store that wil communicate to the database to handle common actions executed upon a user.</summary>
    public interface IUserManagementService
    {
        /// <summary> Validates the current user by comparing the email adress against the password hash storedin the database.</summary>
        /// <param name="emailAdress"> The registered email adress used for user validation.</param>
        /// <param name="password"> The password string that will be compared against the hash stored in the database.</param>
        /// <returns> Result struct indicating the status of the validation request.</returns>
        Task<UserResult> ValidateUserAsync(string emailAdress, string password);
        /// <summary> Validates the authenticator code provided by the user.</summary>
        /// <param name="code"> The code generated by the user's authenticator application.</param>
        /// <param name="userId"> The id of the user issueing the validation request.</param>
        /// <returns> Result struct indicating the status of the validation request.</returns>
        Task<AuthenticationResults> ValidateAuthenticationCodeAsync(string code, long userId);
        /// <summary> Inserts the user into the database with the given authentication information.</summary>
        /// <param name="emailAdress"> The email adress used for validation.</param>
        /// <param name="password"> The password that will be used for validation.</param>
        /// <returns> Result struct indicating the status of the validation request.</returns>
        Task<UserResult> CreateAsync(string emailAdress, string password);
        /// <summary> Creates a confirmation token that will be used to verify a user's email adress and stores it in the database.</summary>
        /// <param name="userId"> The user ascociated with the email confirmation.</param>
        /// <returns> Token that will be sent to the user's email adress to verify their email adress.</returns>
        Task<string> GenerateEmailConfiramtionTokenAsync(long userId);

        /// <summary> Gets the user id from the given claims principal.</summary>
        /// <param name="claimPrincipal"> The claims principal sent by the user client.</param>
        /// <returns> user id.</returns>
        long GetUserID(ClaimsPrincipal claimPrincipal);
        /// <summary> Fetches the user stored in the authentication context by looking for a matching id.</summary>
        /// <param name="id"> The id used to find the user.</param>
        /// <returns> Instance of the authentication user stored in the database.</returns>
        Task<AuthenticationUser> FindUserById(ulong id);
        /// <summary> Fetches the user stored in the authentication context by looking for a matching email adress.</summary>
        /// <param name="email"> The email used to find the user.</param>
        /// <returns> Instance of the authentication user stored in the database.</returns>
        Task<AuthenticationUser> FindUserByEmail(string email);
    }
}
